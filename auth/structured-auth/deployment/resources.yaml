apiVersion: v1
kind: Service
metadata:
  name: opa-authz-webhook
  namespace: opa
  labels:
    app: opa
spec:
  type: NodePort
  ports:
    - port: 30001
      nodePort: 30001
      targetPort: 8443
  selector:
    app: opa
---
# ConfigMap containing Vector.dev configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-config
  namespace: opa
  labels:
    app: logger
data:
  vector.yaml: |
    api:
      enabled: true
    sources:
      app_logs:
        type: http_server
        address: 127.0.0.1:3020
        encoding: json
        method: POST
        path: /logs
        path_key: path
        response_code: 200
        strict_path: true

    transforms:
      parse_logs:
        type: remap
        inputs:
          - app_logs
        source: |
          .timestamp = now()
          .service = "my-app"
          .host = get_hostname!()

    sinks:
      stdout:
        type: console
        inputs:
          - parse_logs
        encoding:
          codec: json
      
      # Example: Send logs to a remote endpoint
      # remote_logs:
      #   type: http
      #   inputs:
      #     - parse_logs
      #   uri: "https://your-log-endpoint.com/api/logs"
      #   encoding:
      #     codec: json
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opa
  namespace: opa
  labels:
    app: opa
spec:
  replicas: 1  # Adjust the number of replicas as needed
  selector:
    matchLabels:
      app: opa
  template:
    metadata:
      labels:
        app: opa
    spec:
      volumes:
        - name: cert-volume
          emptyDir: {}
        - name: policy-volume
          configMap:
            name: opa-k8s-authz-policy
        - name: vector-config
          configMap:
            name: vector-config
            items:
              - key: vector.yaml
                path: vector.yaml
      initContainers:
        - name: cert-create
          image: frapsoft/openssl:latest
          args: [
            "req",
            "-x509",
            "-newkey",
            "rsa:4096",
            "-keyout",
            "/certs/key.pem",
            "-out",
            "/certs/cert.pem",
            "-nodes",
            "-days",
            "365",
            "-subj",
            "/C=SE/ST=Stockholm/L=Stockholm/O=Styra/OU=Org/CN=10.96.167.0"
          ]
          volumeMounts:
            - mountPath: /certs
              name: cert-volume
      containers:
        - name: vector
          image: timberio/vector:nightly-distroless-static
          volumeMounts:
            - name: vector-config
              mountPath: /etc/vector
          ports:
            - name: vector
              containerPort: 3020
              protocol: TCP
        - name: opa
          image: openpolicyagent/opa:0.70.0-static
          ports:
            - containerPort: 8443
          args:
            [
              "run",
              "--server",
              "--ignore=.*",
              "--addr=:8443",
              "--log-level=debug",
              "--log-format=json-pretty",
              "--shutdown-grace-period=25",
              "--shutdown-wait-period=10",
              "--set=caching.inter_query_builtin_cache.max_size_bytes=128000000",
              "--set=decision_logs.console=false",
              "--set=services.vector.url=http://127.0.0.1:3020",
              "--set=decision_logs.resource=/logs",
              "--set=decision_logs.service=vector",
              "--set=decision_logs.reporting.min_delay_seconds=2",
              "--set=decision_logs.reporting.max_delay_seconds=5",
              "--tls-cert-file=/certs/cert.pem",
              "--tls-private-key-file=/certs/key.pem",
              "/policy/"
            ]
          env:
            - name: APP_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app']
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 12000
            runAsGroup: 12000
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - all
          volumeMounts:
            - mountPath: /certs
              name: cert-volume
            - mountPath: /policy
              name: policy-volume
      # Run only on the control-plane nodes (with the API server)
      # tolerations:
      #   - key: node-role.kubernetes.io/control-plane
      #     effect: NoSchedule
      # nodeSelector:
      #   node-role.kubernetes.io/control-plane: ""